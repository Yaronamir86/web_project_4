!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class t{constructor(t){e(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),e(this,"_handleOverlayClose",(e=>{e.target.classList.contains("modal")&&this.close()})),this._popupElement=document.querySelector(t),this.close=this.close.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("click",this._handleOverlayClose),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("click",this._handleOverlayClose),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupElement.querySelector(".modal__close-btn").addEventListener("click",this.close)}}class s extends t{constructor(e,t){var s,i;super(e),i=()=>{super.close(),this._formElement.reset()},(s="close")in this?Object.defineProperty(this,s,{value:i,enumerable:!0,configurable:!0,writable:!0}):this[s]=i,this._formElement=this._popupElement.querySelector(".form"),this._inputList=[...this._formElement.querySelectorAll(".form__input")],this._submitHandler=t,this._submitButton=this._formElement.querySelector(".form__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}setEventListeners(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler(this._getInputValues())})),super.setEventListeners()}}class i{constructor(e,t,s,i,n,r){var o,a;a=()=>document.querySelector(this._selector).content.querySelector(".element__list-item").cloneNode(!0),(o="_getTemplateClone")in this?Object.defineProperty(this,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):this[o]=a,this._text=e.name,this._link=e.link,this._selector=t,this._handleCardClick=s,this._handleDeleteCard=i,this._handleLikeIcon=n,this._id=e._id,this._userId=r,this._ownerId=e.owner._id,this._likes=e.likes,this._likeCount=e.likes}getId(){return this._id}removeCard(){this._element.remove(),this._element=null}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeIcon(this._id))),this._deleteButton.addEventListener("click",(()=>this._handleDeleteCard(this._id))),this._image.addEventListener("click",(e=>this._handleCardClick(e)))}setLikes(e){this._likes=e;const t=this._likes.length;this._likeCount.textContent=t,this.isLiked()?this._likeButton.classList.add("element__like-btn_active"):this._likeButton.classList.remove("element__like-btn_active")}isLiked(){return this._likes.find((e=>e._id===this._userId))}generateCard(){return this._element=this._getTemplateClone(),this._image=this._element.querySelector(".element__photo"),this._image.src=this._link,this._image.alt="A beautiful scene in ".concat(this._text),this._deleteButton=this._element.querySelector(".element__trash-btn"),this._likeButton=this._element.querySelector(".element__like-btn"),this._likeCount=this._element.querySelector(".element__like-count"),this._element.querySelector(".element__title").textContent=this._text,this._ownerId!==this._userId&&(this._deleteButton.style.display="none"),this.setLikes(this._likes),this._setEventListeners(),this._element}}function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class r{constructor(e,t){n(this,"_showInputError",((e,t)=>{const s=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)})),n(this,"_hideInputError",(e=>{const t=this._form.querySelector(".".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)})),n(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),n(this,"_hasInvalidInputs",(()=>this._inputList.some((e=>!e.validity.valid)))),n(this,"enableButton",(()=>{this._button.disabled=!1,this._button.classList.remove(this._inactiveButtonClass)})),n(this,"_disableButton",(()=>{this._button.disabled=!0,this._button.classList.add(this._inactiveButtonClass)})),n(this,"_toggleButton",(()=>{this._hasInvalidInputs()?this._disableButton():this.enableButton()})),n(this,"_setEventListeners",(()=>{this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._button=this._form.querySelector(this._submitButtonSelector),this._toggleButton(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButton()}))}))})),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}resetValidation(){this._disableButton()}enableValidation(){this._form.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()}hideErrors(){this._inputList.forEach((e=>{this._hideInputError(e)}))}}const o={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},a=(document.querySelector(".element__list"),document.querySelector(".form_type_profile")),l=document.querySelector(".profile__edit-btn"),c=document.querySelector(".profile__add-btn"),h=document.querySelector(".form__input_type_name"),_=document.querySelector(".form__input_type_about-me"),d=document.querySelector(".form_type_place"),u=document.querySelector(".form_type_avatar"),m=document.querySelector(".profile__avatar-container");document.querySelector(".profile__avatar"),document.querySelector(".element__trash-btn");const p=new class{constructor(e){let{baseUrl:t,headers:s}=e;var i,n;n=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.statusText))),(i="_customFetch")in this?Object.defineProperty(this,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[i]=n,this._baseUrl=t,this._headers=s}getInitialCards(){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers})}getUserInfo(){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}editProfile(e,t){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,about:t})})}editAvatar(e){return this._customFetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})})}createCards(e){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCards(e){return this._customFetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"})}addLike(e){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"})}removeLike(e){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"a42b1115-c728-4ed0-ac26-3d3a2cd8e95d","Content-Type":"application/json"}}),v=new s(".modal_type_edit-profile",(e=>{v.renderLoading(!0,"saving..."),p.editProfile(e.user,e.about).then((e=>{q.setUserInfo(e.name,e.about),v.close()})).catch((e=>console.log(e))).finally((()=>v.renderLoading(!1)))}));v.setEventListeners();const b=new s(".modal_type_place",(e=>{b.renderLoading(!0,"Creating..."),p.createCards({name:e.Title,link:e["Image link"]}).then((e=>{k(e),b.close()})).catch((e=>console.log(e))).finally((()=>b.renderLoading(!1)))}));b.setEventListeners();const f=new s(".modal_type_avatar",(e=>{f.renderLoading(!0,"saving..."),p.editAvatar(e["Image link"]).then((e=>{q.setAvatarInfo(e.avatar),f.close()})).catch((e=>console.log(e))).finally((()=>f.renderLoading(!1)))}));f.setEventListeners();const y=new class extends t{constructor(e){super(e),this._imageElemant=this._popupElement.querySelector(".modal__image_type_preview"),this._imageCaption=this._popupElement.querySelector(".modal__title_type_preview")}open(e,t){this._imageElemant.src=e,this._imageElemant.alt="A beautiful view of ".concat(t),this._imageCaption.textContent=t,super.open()}}(".modal_type_preview");y.setEventListeners();const E=new class extends t{setAction(e){this._submitHandler=e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()})),super.setEventListeners()}}(".modal_type_delete");let L;E.setEventListeners(),Promise.all([p.getInitialCards(),p.getUserInfo()]).then((e=>{let[t,s]=e;L=s._id,g.render(t),q.setUserInfo(s.name,s.about),q.setAvatarInfo(s.avatar)})).catch((e=>console.log(e)));const g=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}render(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:k},".element__list");function k(e){const t=function(e){const t=new i(e,"#card-template",(()=>{y.open(e.link,e.name)}),(e=>{E.open(),E.setAction((()=>{p.deleteCards(e).then((e=>{t.removeCard(),E.close()})).catch((e=>console.log(e)))}))}),(()=>{t.isLiked()?p.removeLike(t.getId()).then((e=>{t.setLikes(e.likes)})).catch((e=>console.log(e))):p.addLike(t.getId()).then((e=>{t.setLikes(e.likes)})).catch((e=>console.log(e)))}),L);return t.generateCard(e)}(e);g.addItem(t)}const C=new r(o,a),S=new r(o,d),I=new r(o,u);S.enableValidation(),C.enableValidation(),I.enableValidation();const q=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(s),this._avatar=document.querySelector(i)}getUserInfo(){return{name:this._profileName.textContent,job:this._profileJob.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._profileJob.textContent=t}setAvatarInfo(e){this._avatar.src=e}}({nameSelector:".profile__name",jobSelector:".profile__about",avatarSelector:".profile__avatar"});l.addEventListener("click",(()=>{const e=q.getUserInfo();h.value=e.name,_.value=e.job,C.enableButton(),C.hideErrors(),v.open()})),c.addEventListener("click",(()=>{b.open(),S.resetValidation(),S.hideErrors()})),m.addEventListener("click",(()=>{f.open(),I.resetValidation(),I.hideErrors()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,